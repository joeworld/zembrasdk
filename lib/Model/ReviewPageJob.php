<?php
/**
 * ReviewPageJob
 *
 * PHP version 5
 *
 * @category Class
 * @package  Zembra\Client
 * @author   Zembra Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Zembra - API Reference
 *
 * Zembra is a REST API. It accepts standard verbs and returns JSON responses with standard HTTP response codes.    You can use the sandbox token and endpoints for testing. Using the sandbox does not affect your account's balance. Nevertheless, the same throttling applies to both live and sandbox environments. The sandbox randomly returns dummy data representing all different expected responses from an endpoint. The sandbox performs the same set of validation the live box does, including slug validation and eligibility for services.    Default throttling is set to **10000** calls per minute. Your account may have higher limit. If you don't know your current rate limit, contact your account manager or reach out to our [support team](mailto:contact@zembratech.com).  Each response returned by the API has throttling info added to the headers: - **X-RateLimit-Limit**: 10000 or -1 if no limit   The allocated rate limit to the account - **X-RateLimit-Remaining**: < 10000 or -1 if no limit   The number of remaining calls before hitting the throttling limit and start getting calls rejected until counter is reset.    Zembra has made available SDKs in many coding languages to help you quickly get started consuming the API with minimum effort:   - [C-Sharp](https://cdn.sdks.zembratech.com/zembra-sdk-csharp.zip) - [Go](https://cdn.sdks.zembratech.com/zembra-sdk-go.zip) - [Java](https://cdn.sdks.zembratech.com/zembra-sdk-java.zip) - [Kotlin](https://cdn.sdks.zembratech.com/zembra-sdk-kotlin.zip) - [PHP](https://cdn.sdks.zembratech.com/zembra-sdk-php.zip) - [Python](https://cdn.sdks.zembratech.com/zembra-sdk-python.zip) - [Scala](https://cdn.sdks.zembratech.com/zembra-sdk-scala.zip) - [Swift 3](https://cdn.sdks.zembratech.com/zembra-sdk-swift3.zip) - [Swift 4](https://cdn.sdks.zembratech.com/zembra-sdk-swift4.zip) - [Swift 5](https://cdn.sdks.zembratech.com/zembra-sdk-swift5.zip) - [Typescript Angular](https://cdn.sdks.zembratech.com/zembra-sdk-typescript-angular.zip) - [Typescript Fetch](https://cdn.sdks.zembratech.com/zembra-sdk-typescript-fetch.zip)  You can also download [Postman](https://www.postman.com/downloads/) then import this [collection](https://www.getpostman.com/collections/57d319ce3e3bb1150bc6) which includes calls the all Zembra API sandbox endpoints with a combination of all available parameters.
 *
 * OpenAPI spec version: 2.3.0
 * Contact: contact@zembratech.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Zembra Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Zembra\Client\Model;

use \ArrayAccess;
use \Zembra\Client\ObjectSerializer;

/**
 * ReviewPageJob Class Doc Comment
 *
 * @category Class
 * @package  Zembra\Client
 * @author   Zembra Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReviewPageJob implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReviewPageJob';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'network' => '\Zembra\Client\Model\ReviewNetwork',
'slug' => '\Zembra\Client\Model\Slug',
'job_id' => 'string',
'internal_id' => 'string',
'requested_at' => '\DateTime',
'data_retention_expiration' => '\DateTime',
'stream_size_limit' => 'int',
'include_raw_data' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'network' => null,
'slug' => null,
'job_id' => null,
'internal_id' => null,
'requested_at' => 'date-time',
'data_retention_expiration' => 'date-time',
'stream_size_limit' => null,
'include_raw_data' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'network' => 'network',
'slug' => 'slug',
'job_id' => 'jobId',
'internal_id' => 'internalId',
'requested_at' => 'requestedAt',
'data_retention_expiration' => 'dataRetentionExpiration',
'stream_size_limit' => 'streamSizeLimit',
'include_raw_data' => 'includeRawData'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'network' => 'setNetwork',
'slug' => 'setSlug',
'job_id' => 'setJobId',
'internal_id' => 'setInternalId',
'requested_at' => 'setRequestedAt',
'data_retention_expiration' => 'setDataRetentionExpiration',
'stream_size_limit' => 'setStreamSizeLimit',
'include_raw_data' => 'setIncludeRawData'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'network' => 'getNetwork',
'slug' => 'getSlug',
'job_id' => 'getJobId',
'internal_id' => 'getInternalId',
'requested_at' => 'getRequestedAt',
'data_retention_expiration' => 'getDataRetentionExpiration',
'stream_size_limit' => 'getStreamSizeLimit',
'include_raw_data' => 'getIncludeRawData'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['network'] = isset($data['network']) ? $data['network'] : null;
        $this->container['slug'] = isset($data['slug']) ? $data['slug'] : null;
        $this->container['job_id'] = isset($data['job_id']) ? $data['job_id'] : null;
        $this->container['internal_id'] = isset($data['internal_id']) ? $data['internal_id'] : null;
        $this->container['requested_at'] = isset($data['requested_at']) ? $data['requested_at'] : null;
        $this->container['data_retention_expiration'] = isset($data['data_retention_expiration']) ? $data['data_retention_expiration'] : null;
        $this->container['stream_size_limit'] = isset($data['stream_size_limit']) ? $data['stream_size_limit'] : null;
        $this->container['include_raw_data'] = isset($data['include_raw_data']) ? $data['include_raw_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets network
     *
     * @return \Zembra\Client\Model\ReviewNetwork
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param \Zembra\Client\Model\ReviewNetwork $network network
     *
     * @return $this
     */
    public function setNetwork($network)
    {
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return \Zembra\Client\Model\Slug
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param \Zembra\Client\Model\Slug $slug slug
     *
     * @return $this
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets job_id
     *
     * @return string
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     *
     * @param string $job_id The generated job ID that uniquely identifies the job in our platform. This is used to retrieve results or to identify delivered payload to your selected destination.
     *
     * @return $this
     */
    public function setJobId($job_id)
    {
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return string
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string $internal_id Your application internal ID associated with this record.
     *
     * @return $this
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets requested_at
     *
     * @return \DateTime
     */
    public function getRequestedAt()
    {
        return $this->container['requested_at'];
    }

    /**
     * Sets requested_at
     *
     * @param \DateTime $requested_at The time this job was requested in UTC.
     *
     * @return $this
     */
    public function setRequestedAt($requested_at)
    {
        $this->container['requested_at'] = $requested_at;

        return $this;
    }

    /**
     * Gets data_retention_expiration
     *
     * @return \DateTime
     */
    public function getDataRetentionExpiration()
    {
        return $this->container['data_retention_expiration'];
    }

    /**
     * Sets data_retention_expiration
     *
     * @param \DateTime $data_retention_expiration The time until which the data will remain querable in our system and available for download.
     *
     * @return $this
     */
    public function setDataRetentionExpiration($data_retention_expiration)
    {
        $this->container['data_retention_expiration'] = $data_retention_expiration;

        return $this;
    }

    /**
     * Gets stream_size_limit
     *
     * @return int
     */
    public function getStreamSizeLimit()
    {
        return $this->container['stream_size_limit'];
    }

    /**
     * Sets stream_size_limit
     *
     * @param int $stream_size_limit The requested maximum number of reviews to be returned.
     *
     * @return $this
     */
    public function setStreamSizeLimit($stream_size_limit)
    {
        $this->container['stream_size_limit'] = $stream_size_limit;

        return $this;
    }

    /**
     * Gets include_raw_data
     *
     * @return bool
     */
    public function getIncludeRawData()
    {
        return $this->container['include_raw_data'];
    }

    /**
     * Sets include_raw_data
     *
     * @param bool $include_raw_data Describes the requested behavior of listeners to deliver payload to destination with or without review raw data.
     *
     * @return $this
     */
    public function setIncludeRawData($include_raw_data)
    {
        $this->container['include_raw_data'] = $include_raw_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
