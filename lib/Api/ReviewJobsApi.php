<?php
/**
 * ReviewJobsApi
 * PHP version 5
 *
 * @category Class
 * @package  Zembra\Client
 * @author   Zembra Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Zembra - API Reference
 *
 * Zembra is a REST API. It accepts standard verbs and returns JSON responses with standard HTTP response codes.    You can use the sandbox token and endpoints for testing. Using the sandbox does not affect your account's balance. Nevertheless, the same throttling applies to both live and sandbox environments combined. The sandbox randomly returns dummy data representing all different expected responses from an endpoint. The sandbox performs the same set of validation the live box does, including slug validation and eligibility for services.    Default throttling is set to **100** calls per minute. Your account may have a higher limit. If you don't know your current rate limit, contact your account manager or reach out to our [support team](mailto:contact@zembratech.com).  Each response returned by the API has throttling info added to the headers: - **X-RateLimit-Limit**: 100 or -1 if no limit   The allocated rate limit to the account - **X-RateLimit-Remaining**: < 100 or -1 if no limit   The number of remaining calls before hitting the throttling limit and start getting calls rejected until the counter is reset.    Zembra has made SDKs available in many coding languages to help you quickly get started consuming the API with minimum effort:   - [C-Sharp](https://cdn.sdks.zembratech.com/zembra-sdk-csharp.zip) - [Go](https://cdn.sdks.zembratech.com/zembra-sdk-go.zip) - [Java](https://cdn.sdks.zembratech.com/zembra-sdk-java.zip) - [Kotlin](https://cdn.sdks.zembratech.com/zembra-sdk-kotlin.zip) - [PHP](https://cdn.sdks.zembratech.com/zembra-sdk-php.zip) - [Python](https://cdn.sdks.zembratech.com/zembra-sdk-python.zip) - [Scala](https://cdn.sdks.zembratech.com/zembra-sdk-scala.zip) - [Swift 3](https://cdn.sdks.zembratech.com/zembra-sdk-swift3.zip) - [Swift 4](https://cdn.sdks.zembratech.com/zembra-sdk-swift4.zip) - [Swift 5](https://cdn.sdks.zembratech.com/zembra-sdk-swift5.zip) - [Typescript Angular](https://cdn.sdks.zembratech.com/zembra-sdk-typescript-angular.zip) - [Typescript Fetch](https://cdn.sdks.zembratech.com/zembra-sdk-typescript-fetch.zip)  You can also download [Postman](https://www.postman.com/downloads/) then import this [collection](https://docs.zembra.io/zembra-api-postman-collection.json) which includes calls the all Zembra API sandbox endpoints with a combination of all available parameters.
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@zembratech.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Zembra Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Zembra\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Zembra\Client\ApiException;
use Zembra\Client\Configuration;
use Zembra\Client\HeaderSelector;
use Zembra\Client\ObjectSerializer;

/**
 * ReviewJobsApi Class Doc Comment
 *
 * @category Class
 * @package  Zembra\Client
 * @author   Zembra Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReviewJobsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation reviewsJobNetworkPost
     *
     * Create a new review job
     *
     * @param  string $slug slug (required)
     * @param  bool $include_raw_data include_raw_data (required)
     * @param  string $internal_id internal_id (required)
     * @param   $stream_size_limit stream_size_limit (required)
     * @param  \Zembra\Client\Model\ReviewNetwork $network Network this business page belongs to (required)
     *
     * @throws \Zembra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Zembra\Client\Model\InlineResponse2011
     */
    public function reviewsJobNetworkPost($slug, $include_raw_data, $internal_id, $stream_size_limit, $network)
    {
        list($response) = $this->reviewsJobNetworkPostWithHttpInfo($slug, $include_raw_data, $internal_id, $stream_size_limit, $network);
        return $response;
    }

    /**
     * Operation reviewsJobNetworkPostWithHttpInfo
     *
     * Create a new review job
     *
     * @param  string $slug (required)
     * @param  bool $include_raw_data (required)
     * @param  string $internal_id (required)
     * @param   $stream_size_limit (required)
     * @param  \Zembra\Client\Model\ReviewNetwork $network Network this business page belongs to (required)
     *
     * @throws \Zembra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Zembra\Client\Model\InlineResponse2011, HTTP status code, HTTP response headers (array of strings)
     */
    public function reviewsJobNetworkPostWithHttpInfo($slug, $include_raw_data, $internal_id, $stream_size_limit, $network)
    {
        $returnType = '\Zembra\Client\Model\InlineResponse2011';
        $request = $this->reviewsJobNetworkPostRequest($slug, $include_raw_data, $internal_id, $stream_size_limit, $network);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse2011',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse4003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse402',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse4031',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse4042',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reviewsJobNetworkPostAsync
     *
     * Create a new review job
     *
     * @param  string $slug (required)
     * @param  bool $include_raw_data (required)
     * @param  string $internal_id (required)
     * @param   $stream_size_limit (required)
     * @param  \Zembra\Client\Model\ReviewNetwork $network Network this business page belongs to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reviewsJobNetworkPostAsync($slug, $include_raw_data, $internal_id, $stream_size_limit, $network)
    {
        return $this->reviewsJobNetworkPostAsyncWithHttpInfo($slug, $include_raw_data, $internal_id, $stream_size_limit, $network)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reviewsJobNetworkPostAsyncWithHttpInfo
     *
     * Create a new review job
     *
     * @param  string $slug (required)
     * @param  bool $include_raw_data (required)
     * @param  string $internal_id (required)
     * @param   $stream_size_limit (required)
     * @param  \Zembra\Client\Model\ReviewNetwork $network Network this business page belongs to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reviewsJobNetworkPostAsyncWithHttpInfo($slug, $include_raw_data, $internal_id, $stream_size_limit, $network)
    {
        $returnType = '\Zembra\Client\Model\InlineResponse2011';
        $request = $this->reviewsJobNetworkPostRequest($slug, $include_raw_data, $internal_id, $stream_size_limit, $network);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reviewsJobNetworkPost'
     *
     * @param  string $slug (required)
     * @param  bool $include_raw_data (required)
     * @param  string $internal_id (required)
     * @param   $stream_size_limit (required)
     * @param  \Zembra\Client\Model\ReviewNetwork $network Network this business page belongs to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reviewsJobNetworkPostRequest($slug, $include_raw_data, $internal_id, $stream_size_limit, $network)
    {
        // verify the required parameter 'slug' is set
        if ($slug === null || (is_array($slug) && count($slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slug when calling reviewsJobNetworkPost'
            );
        }
        // verify the required parameter 'include_raw_data' is set
        if ($include_raw_data === null || (is_array($include_raw_data) && count($include_raw_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_raw_data when calling reviewsJobNetworkPost'
            );
        }
        // verify the required parameter 'internal_id' is set
        if ($internal_id === null || (is_array($internal_id) && count($internal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $internal_id when calling reviewsJobNetworkPost'
            );
        }
        // verify the required parameter 'stream_size_limit' is set
        if ($stream_size_limit === null || (is_array($stream_size_limit) && count($stream_size_limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stream_size_limit when calling reviewsJobNetworkPost'
            );
        }
        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling reviewsJobNetworkPost'
            );
        }

        $resourcePath = '/reviews/job/{network}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }

        // form params
        if ($slug !== null) {
            $formParams['slug'] = ObjectSerializer::toFormValue($slug);
        }
        // form params
        if ($include_raw_data !== null) {
            $formParams['includeRawData'] = ObjectSerializer::toFormValue($include_raw_data);
        }
        // form params
        if ($internal_id !== null) {
            $formParams['internalId'] = ObjectSerializer::toFormValue($internal_id);
        }
        // form params
        if ($stream_size_limit !== null) {
            $formParams['streamSizeLimit'] = ObjectSerializer::toFormValue($stream_size_limit);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reviewsJobUidGet
     *
     * Get reviews of requested business from existing job by UID
     *
     * @param  string $uid The UID of the job that was returned at the time of creating the job (required)
     * @param  string[] $fields List of review fields to be returned (optional)
     * @param  int $limit Indicates the maximum number of reviews to be returned. If you change the default list of fields and omit the &#x60;limit&#x60; then the default limit will be applied. (optional, default to 1000)
     * @param  int $offset Helps with pagination. It indicates the offset to be applied to the set of reviews. (optional)
     *
     * @throws \Zembra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Zembra\Client\Model\InlineResponse2006
     */
    public function reviewsJobUidGet($uid, $fields = null, $limit = '1000', $offset = null)
    {
        list($response) = $this->reviewsJobUidGetWithHttpInfo($uid, $fields, $limit, $offset);
        return $response;
    }

    /**
     * Operation reviewsJobUidGetWithHttpInfo
     *
     * Get reviews of requested business from existing job by UID
     *
     * @param  string $uid The UID of the job that was returned at the time of creating the job (required)
     * @param  string[] $fields List of review fields to be returned (optional)
     * @param  int $limit Indicates the maximum number of reviews to be returned. If you change the default list of fields and omit the &#x60;limit&#x60; then the default limit will be applied. (optional, default to 1000)
     * @param  int $offset Helps with pagination. It indicates the offset to be applied to the set of reviews. (optional)
     *
     * @throws \Zembra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Zembra\Client\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function reviewsJobUidGetWithHttpInfo($uid, $fields = null, $limit = '1000', $offset = null)
    {
        $returnType = '\Zembra\Client\Model\InlineResponse2006';
        $request = $this->reviewsJobUidGetRequest($uid, $fields, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse206',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse4004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse4043',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reviewsJobUidGetAsync
     *
     * Get reviews of requested business from existing job by UID
     *
     * @param  string $uid The UID of the job that was returned at the time of creating the job (required)
     * @param  string[] $fields List of review fields to be returned (optional)
     * @param  int $limit Indicates the maximum number of reviews to be returned. If you change the default list of fields and omit the &#x60;limit&#x60; then the default limit will be applied. (optional, default to 1000)
     * @param  int $offset Helps with pagination. It indicates the offset to be applied to the set of reviews. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reviewsJobUidGetAsync($uid, $fields = null, $limit = '1000', $offset = null)
    {
        return $this->reviewsJobUidGetAsyncWithHttpInfo($uid, $fields, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reviewsJobUidGetAsyncWithHttpInfo
     *
     * Get reviews of requested business from existing job by UID
     *
     * @param  string $uid The UID of the job that was returned at the time of creating the job (required)
     * @param  string[] $fields List of review fields to be returned (optional)
     * @param  int $limit Indicates the maximum number of reviews to be returned. If you change the default list of fields and omit the &#x60;limit&#x60; then the default limit will be applied. (optional, default to 1000)
     * @param  int $offset Helps with pagination. It indicates the offset to be applied to the set of reviews. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reviewsJobUidGetAsyncWithHttpInfo($uid, $fields = null, $limit = '1000', $offset = null)
    {
        $returnType = '\Zembra\Client\Model\InlineResponse2006';
        $request = $this->reviewsJobUidGetRequest($uid, $fields, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reviewsJobUidGet'
     *
     * @param  string $uid The UID of the job that was returned at the time of creating the job (required)
     * @param  string[] $fields List of review fields to be returned (optional)
     * @param  int $limit Indicates the maximum number of reviews to be returned. If you change the default list of fields and omit the &#x60;limit&#x60; then the default limit will be applied. (optional, default to 1000)
     * @param  int $offset Helps with pagination. It indicates the offset to be applied to the set of reviews. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reviewsJobUidGetRequest($uid, $fields = null, $limit = '1000', $offset = null)
    {
        // verify the required parameter 'uid' is set
        if ($uid === null || (is_array($uid) && count($uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uid when calling reviewsJobUidGet'
            );
        }

        $resourcePath = '/reviews/job/{uid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields[]'] = ObjectSerializer::toQueryValue($fields, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        }

        // path params
        if ($uid !== null) {
            $resourcePath = str_replace(
                '{' . 'uid' . '}',
                ObjectSerializer::toPathValue($uid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reviewsJobsGet
     *
     * Get the list of review jobs
     *
     * @param  int $limit Maximum number of jobs to be returned. At most 100 jobs will be returned even if this parameter is set to a higher value. (optional, default to 100)
     * @param  int $offset Helps with pagination. It controls the offset to be applied to the set of jobs. (optional)
     * @param  string $sort_by Indicates the desired sorting attribute. (optional, default to timestamp)
     * @param  string $sort_direction Indicates the desired sorting direction. (optional, default to DESC)
     * @param  string $internal_id Filter results to only jobs with similar internal ID. This is the ID you set on the job that identifies it with your application. Please see the description for &#x60;internalId&#x60; on **[POST] /reviews/subscription/{network}**. (optional)
     * @param  \Zembra\Client\Model\Slug $slug Filter results to only jobs with similar slug. Please see the description for &#x60;slug&#x60; on **[GET] /business/{network}**. (optional)
     * @param  \Zembra\Client\Model\ReviewNetwork $network Returns jobs only from the requested network. (optional)
     *
     * @throws \Zembra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Zembra\Client\Model\InlineResponse2007
     */
    public function reviewsJobsGet($limit = '100', $offset = null, $sort_by = 'timestamp', $sort_direction = 'DESC', $internal_id = null, $slug = null, $network = null)
    {
        list($response) = $this->reviewsJobsGetWithHttpInfo($limit, $offset, $sort_by, $sort_direction, $internal_id, $slug, $network);
        return $response;
    }

    /**
     * Operation reviewsJobsGetWithHttpInfo
     *
     * Get the list of review jobs
     *
     * @param  int $limit Maximum number of jobs to be returned. At most 100 jobs will be returned even if this parameter is set to a higher value. (optional, default to 100)
     * @param  int $offset Helps with pagination. It controls the offset to be applied to the set of jobs. (optional)
     * @param  string $sort_by Indicates the desired sorting attribute. (optional, default to timestamp)
     * @param  string $sort_direction Indicates the desired sorting direction. (optional, default to DESC)
     * @param  string $internal_id Filter results to only jobs with similar internal ID. This is the ID you set on the job that identifies it with your application. Please see the description for &#x60;internalId&#x60; on **[POST] /reviews/subscription/{network}**. (optional)
     * @param  \Zembra\Client\Model\Slug $slug Filter results to only jobs with similar slug. Please see the description for &#x60;slug&#x60; on **[GET] /business/{network}**. (optional)
     * @param  \Zembra\Client\Model\ReviewNetwork $network Returns jobs only from the requested network. (optional)
     *
     * @throws \Zembra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Zembra\Client\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function reviewsJobsGetWithHttpInfo($limit = '100', $offset = null, $sort_by = 'timestamp', $sort_direction = 'DESC', $internal_id = null, $slug = null, $network = null)
    {
        $returnType = '\Zembra\Client\Model\InlineResponse2007';
        $request = $this->reviewsJobsGetRequest($limit, $offset, $sort_by, $sort_direction, $internal_id, $slug, $network);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse2007',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse4003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reviewsJobsGetAsync
     *
     * Get the list of review jobs
     *
     * @param  int $limit Maximum number of jobs to be returned. At most 100 jobs will be returned even if this parameter is set to a higher value. (optional, default to 100)
     * @param  int $offset Helps with pagination. It controls the offset to be applied to the set of jobs. (optional)
     * @param  string $sort_by Indicates the desired sorting attribute. (optional, default to timestamp)
     * @param  string $sort_direction Indicates the desired sorting direction. (optional, default to DESC)
     * @param  string $internal_id Filter results to only jobs with similar internal ID. This is the ID you set on the job that identifies it with your application. Please see the description for &#x60;internalId&#x60; on **[POST] /reviews/subscription/{network}**. (optional)
     * @param  \Zembra\Client\Model\Slug $slug Filter results to only jobs with similar slug. Please see the description for &#x60;slug&#x60; on **[GET] /business/{network}**. (optional)
     * @param  \Zembra\Client\Model\ReviewNetwork $network Returns jobs only from the requested network. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reviewsJobsGetAsync($limit = '100', $offset = null, $sort_by = 'timestamp', $sort_direction = 'DESC', $internal_id = null, $slug = null, $network = null)
    {
        return $this->reviewsJobsGetAsyncWithHttpInfo($limit, $offset, $sort_by, $sort_direction, $internal_id, $slug, $network)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reviewsJobsGetAsyncWithHttpInfo
     *
     * Get the list of review jobs
     *
     * @param  int $limit Maximum number of jobs to be returned. At most 100 jobs will be returned even if this parameter is set to a higher value. (optional, default to 100)
     * @param  int $offset Helps with pagination. It controls the offset to be applied to the set of jobs. (optional)
     * @param  string $sort_by Indicates the desired sorting attribute. (optional, default to timestamp)
     * @param  string $sort_direction Indicates the desired sorting direction. (optional, default to DESC)
     * @param  string $internal_id Filter results to only jobs with similar internal ID. This is the ID you set on the job that identifies it with your application. Please see the description for &#x60;internalId&#x60; on **[POST] /reviews/subscription/{network}**. (optional)
     * @param  \Zembra\Client\Model\Slug $slug Filter results to only jobs with similar slug. Please see the description for &#x60;slug&#x60; on **[GET] /business/{network}**. (optional)
     * @param  \Zembra\Client\Model\ReviewNetwork $network Returns jobs only from the requested network. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reviewsJobsGetAsyncWithHttpInfo($limit = '100', $offset = null, $sort_by = 'timestamp', $sort_direction = 'DESC', $internal_id = null, $slug = null, $network = null)
    {
        $returnType = '\Zembra\Client\Model\InlineResponse2007';
        $request = $this->reviewsJobsGetRequest($limit, $offset, $sort_by, $sort_direction, $internal_id, $slug, $network);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reviewsJobsGet'
     *
     * @param  int $limit Maximum number of jobs to be returned. At most 100 jobs will be returned even if this parameter is set to a higher value. (optional, default to 100)
     * @param  int $offset Helps with pagination. It controls the offset to be applied to the set of jobs. (optional)
     * @param  string $sort_by Indicates the desired sorting attribute. (optional, default to timestamp)
     * @param  string $sort_direction Indicates the desired sorting direction. (optional, default to DESC)
     * @param  string $internal_id Filter results to only jobs with similar internal ID. This is the ID you set on the job that identifies it with your application. Please see the description for &#x60;internalId&#x60; on **[POST] /reviews/subscription/{network}**. (optional)
     * @param  \Zembra\Client\Model\Slug $slug Filter results to only jobs with similar slug. Please see the description for &#x60;slug&#x60; on **[GET] /business/{network}**. (optional)
     * @param  \Zembra\Client\Model\ReviewNetwork $network Returns jobs only from the requested network. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reviewsJobsGetRequest($limit = '100', $offset = null, $sort_by = 'timestamp', $sort_direction = 'DESC', $internal_id = null, $slug = null, $network = null)
    {

        $resourcePath = '/reviews/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by, null);
        }
        // query params
        if ($sort_direction !== null) {
            $queryParams['sortDirection'] = ObjectSerializer::toQueryValue($sort_direction, null);
        }
        // query params
        if ($internal_id !== null) {
            $queryParams['internalId'] = ObjectSerializer::toQueryValue($internal_id, null);
        }
        // query params
        if ($slug !== null) {
            $queryParams['slug'] = ObjectSerializer::toQueryValue($slug, null);
        }
        // query params
        if ($network !== null) {
            $queryParams['network'] = ObjectSerializer::toQueryValue($network, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
