<?php
/**
 * BusinessApi
 * PHP version 5
 *
 * @category Class
 * @package  Zembra\Client
 * @author   Zembra Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Zembra - API Reference
 *
 * Zembra is a REST API. It accepts standard verbs and returns JSON responses with standard HTTP response codes.    You can use the sandbox token and endpoints for testing. Using the sandbox does not affect your account's balance. Nevertheless, the same throttling applies to both live and sandbox environments combined. The sandbox randomly returns dummy data representing all different expected responses from an endpoint. The sandbox performs the same set of validation the live box does, including slug validation and eligibility for services.    Default throttling is set to **100** calls per minute. Your account may have a higher limit. If you don't know your current rate limit, contact your account manager or reach out to our [support team](mailto:contact@zembratech.com).  Each response returned by the API has throttling info added to the headers: - **X-RateLimit-Limit**: 100 or -1 if no limit   The allocated rate limit to the account - **X-RateLimit-Remaining**: < 100 or -1 if no limit   The number of remaining calls before hitting the throttling limit and start getting calls rejected until the counter is reset.    Zembra has made SDKs available in many coding languages to help you quickly get started consuming the API with minimum effort:   - [C-Sharp](https://cdn.sdks.zembratech.com/zembra-sdk-csharp.zip) - [Go](https://cdn.sdks.zembratech.com/zembra-sdk-go.zip) - [Java](https://cdn.sdks.zembratech.com/zembra-sdk-java.zip) - [Kotlin](https://cdn.sdks.zembratech.com/zembra-sdk-kotlin.zip) - [PHP](https://cdn.sdks.zembratech.com/zembra-sdk-php.zip) - [Python](https://cdn.sdks.zembratech.com/zembra-sdk-python.zip) - [Scala](https://cdn.sdks.zembratech.com/zembra-sdk-scala.zip) - [Swift 3](https://cdn.sdks.zembratech.com/zembra-sdk-swift3.zip) - [Swift 4](https://cdn.sdks.zembratech.com/zembra-sdk-swift4.zip) - [Swift 5](https://cdn.sdks.zembratech.com/zembra-sdk-swift5.zip) - [Typescript Angular](https://cdn.sdks.zembratech.com/zembra-sdk-typescript-angular.zip) - [Typescript Fetch](https://cdn.sdks.zembratech.com/zembra-sdk-typescript-fetch.zip)  You can also download [Postman](https://www.postman.com/downloads/) then import this [collection](https://docs.zembra.io/zembra-api-postman-collection.json) which includes calls the all Zembra API sandbox endpoints with a combination of all available parameters.
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@zembratech.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Zembra Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Zembra\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Zembra\Client\ApiException;
use Zembra\Client\Configuration;
use Zembra\Client\HeaderSelector;
use Zembra\Client\ObjectSerializer;

/**
 * BusinessApi Class Doc Comment
 *
 * @category Class
 * @package  Zembra\Client
 * @author   Zembra Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BusinessApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation businessFindGet
     *
     * Find business by name and address across multiple networks
     *
     * @param  string $name Name of the business or in some cases the business category (required)
     * @param  string $address One-line formatted address of the business. For some networks, the more precise is the address, the more accurate are the results. Nevertheless, in most of the cases the city is sufficient. The behavior and results are identical to running the same lookup command against the native site. Before questioning why no data is being returned by the API, please first confirm against the original platform. (optional)
     * @param  \Zembra\Client\Model\ReviewNetwork[] $networks Optional field to restrict the search query to a limited set of networks. If omitted, the search covers all networks enabled for the account. Not all networks support this search feature. Your account will only be charged for supported networks. (optional)
     * @param  \Zembra\Client\Model\ReviewPageField[] $fields List of fields to be returned per business page (optional)
     *
     * @throws \Zembra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Zembra\Client\Model\InlineResponse2003
     */
    public function businessFindGet($name, $address = null, $networks = null, $fields = null)
    {
        list($response) = $this->businessFindGetWithHttpInfo($name, $address, $networks, $fields);
        return $response;
    }

    /**
     * Operation businessFindGetWithHttpInfo
     *
     * Find business by name and address across multiple networks
     *
     * @param  string $name Name of the business or in some cases the business category (required)
     * @param  string $address One-line formatted address of the business. For some networks, the more precise is the address, the more accurate are the results. Nevertheless, in most of the cases the city is sufficient. The behavior and results are identical to running the same lookup command against the native site. Before questioning why no data is being returned by the API, please first confirm against the original platform. (optional)
     * @param  \Zembra\Client\Model\ReviewNetwork[] $networks Optional field to restrict the search query to a limited set of networks. If omitted, the search covers all networks enabled for the account. Not all networks support this search feature. Your account will only be charged for supported networks. (optional)
     * @param  \Zembra\Client\Model\ReviewPageField[] $fields List of fields to be returned per business page (optional)
     *
     * @throws \Zembra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Zembra\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function businessFindGetWithHttpInfo($name, $address = null, $networks = null, $fields = null)
    {
        $returnType = '\Zembra\Client\Model\InlineResponse2003';
        $request = $this->businessFindGetRequest($name, $address, $networks, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse4002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse402',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse4031',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse4042',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation businessFindGetAsync
     *
     * Find business by name and address across multiple networks
     *
     * @param  string $name Name of the business or in some cases the business category (required)
     * @param  string $address One-line formatted address of the business. For some networks, the more precise is the address, the more accurate are the results. Nevertheless, in most of the cases the city is sufficient. The behavior and results are identical to running the same lookup command against the native site. Before questioning why no data is being returned by the API, please first confirm against the original platform. (optional)
     * @param  \Zembra\Client\Model\ReviewNetwork[] $networks Optional field to restrict the search query to a limited set of networks. If omitted, the search covers all networks enabled for the account. Not all networks support this search feature. Your account will only be charged for supported networks. (optional)
     * @param  \Zembra\Client\Model\ReviewPageField[] $fields List of fields to be returned per business page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function businessFindGetAsync($name, $address = null, $networks = null, $fields = null)
    {
        return $this->businessFindGetAsyncWithHttpInfo($name, $address, $networks, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation businessFindGetAsyncWithHttpInfo
     *
     * Find business by name and address across multiple networks
     *
     * @param  string $name Name of the business or in some cases the business category (required)
     * @param  string $address One-line formatted address of the business. For some networks, the more precise is the address, the more accurate are the results. Nevertheless, in most of the cases the city is sufficient. The behavior and results are identical to running the same lookup command against the native site. Before questioning why no data is being returned by the API, please first confirm against the original platform. (optional)
     * @param  \Zembra\Client\Model\ReviewNetwork[] $networks Optional field to restrict the search query to a limited set of networks. If omitted, the search covers all networks enabled for the account. Not all networks support this search feature. Your account will only be charged for supported networks. (optional)
     * @param  \Zembra\Client\Model\ReviewPageField[] $fields List of fields to be returned per business page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function businessFindGetAsyncWithHttpInfo($name, $address = null, $networks = null, $fields = null)
    {
        $returnType = '\Zembra\Client\Model\InlineResponse2003';
        $request = $this->businessFindGetRequest($name, $address, $networks, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'businessFindGet'
     *
     * @param  string $name Name of the business or in some cases the business category (required)
     * @param  string $address One-line formatted address of the business. For some networks, the more precise is the address, the more accurate are the results. Nevertheless, in most of the cases the city is sufficient. The behavior and results are identical to running the same lookup command against the native site. Before questioning why no data is being returned by the API, please first confirm against the original platform. (optional)
     * @param  \Zembra\Client\Model\ReviewNetwork[] $networks Optional field to restrict the search query to a limited set of networks. If omitted, the search covers all networks enabled for the account. Not all networks support this search feature. Your account will only be charged for supported networks. (optional)
     * @param  \Zembra\Client\Model\ReviewPageField[] $fields List of fields to be returned per business page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function businessFindGetRequest($name, $address = null, $networks = null, $fields = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling businessFindGet'
            );
        }

        $resourcePath = '/business/find';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // query params
        if ($address !== null) {
            $queryParams['address'] = ObjectSerializer::toQueryValue($address, null);
        }
        // query params
        if (is_array($networks)) {
            $networks = ObjectSerializer::serializeCollection($networks, 'multi', true);
        }
        if ($networks !== null) {
            $queryParams['networks[]'] = ObjectSerializer::toQueryValue($networks, null);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields[]'] = ObjectSerializer::toQueryValue($fields, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation businessMatchGet
     *
     * Match the business across multiple networks
     *
     * @param  string $name Name of the business, preferably as it appears on the review platform (required)
     * @param  string $address One-line formatted address of the business. For some networks, the more precise is the address, the more accurate are the results. Nevertheless, in most of the cases the city is sufficient. Can be omitted if the user prefers to specify address components: &#x60;street&#x60;, &#x60;city&#x60;, &#x60;region&#x60;, &#x60;postalCode&#x60;, and &#x60;country&#x60;. (required)
     * @param  string $street The street and street number of the business. Optionally, the unit/suite number can be appended. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $city The city where the business is located. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $postal_code Postal code or zipcode of the business. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $country The country where the business operates. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $region The state, province, or any regional/political area that the city of the business belongs to. (optional)
     * @param  \Zembra\Client\Model\ReviewNetwork[] $networks Optional field to restrict the search query to a limited set of networks. If omitted, the search covers all networks enabled for the account. (optional)
     * @param  \Zembra\Client\Model\ReviewPageField[] $fields List of fields to be returned per business page (optional)
     *
     * @throws \Zembra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Zembra\Client\Model\InlineResponse2004
     */
    public function businessMatchGet($name, $address, $street, $city, $postal_code, $country, $region = null, $networks = null, $fields = null)
    {
        list($response) = $this->businessMatchGetWithHttpInfo($name, $address, $street, $city, $postal_code, $country, $region, $networks, $fields);
        return $response;
    }

    /**
     * Operation businessMatchGetWithHttpInfo
     *
     * Match the business across multiple networks
     *
     * @param  string $name Name of the business, preferably as it appears on the review platform (required)
     * @param  string $address One-line formatted address of the business. For some networks, the more precise is the address, the more accurate are the results. Nevertheless, in most of the cases the city is sufficient. Can be omitted if the user prefers to specify address components: &#x60;street&#x60;, &#x60;city&#x60;, &#x60;region&#x60;, &#x60;postalCode&#x60;, and &#x60;country&#x60;. (required)
     * @param  string $street The street and street number of the business. Optionally, the unit/suite number can be appended. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $city The city where the business is located. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $postal_code Postal code or zipcode of the business. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $country The country where the business operates. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $region The state, province, or any regional/political area that the city of the business belongs to. (optional)
     * @param  \Zembra\Client\Model\ReviewNetwork[] $networks Optional field to restrict the search query to a limited set of networks. If omitted, the search covers all networks enabled for the account. (optional)
     * @param  \Zembra\Client\Model\ReviewPageField[] $fields List of fields to be returned per business page (optional)
     *
     * @throws \Zembra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Zembra\Client\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function businessMatchGetWithHttpInfo($name, $address, $street, $city, $postal_code, $country, $region = null, $networks = null, $fields = null)
    {
        $returnType = '\Zembra\Client\Model\InlineResponse2004';
        $request = $this->businessMatchGetRequest($name, $address, $street, $city, $postal_code, $country, $region, $networks, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse4002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse402',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse4031',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse4042',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation businessMatchGetAsync
     *
     * Match the business across multiple networks
     *
     * @param  string $name Name of the business, preferably as it appears on the review platform (required)
     * @param  string $address One-line formatted address of the business. For some networks, the more precise is the address, the more accurate are the results. Nevertheless, in most of the cases the city is sufficient. Can be omitted if the user prefers to specify address components: &#x60;street&#x60;, &#x60;city&#x60;, &#x60;region&#x60;, &#x60;postalCode&#x60;, and &#x60;country&#x60;. (required)
     * @param  string $street The street and street number of the business. Optionally, the unit/suite number can be appended. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $city The city where the business is located. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $postal_code Postal code or zipcode of the business. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $country The country where the business operates. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $region The state, province, or any regional/political area that the city of the business belongs to. (optional)
     * @param  \Zembra\Client\Model\ReviewNetwork[] $networks Optional field to restrict the search query to a limited set of networks. If omitted, the search covers all networks enabled for the account. (optional)
     * @param  \Zembra\Client\Model\ReviewPageField[] $fields List of fields to be returned per business page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function businessMatchGetAsync($name, $address, $street, $city, $postal_code, $country, $region = null, $networks = null, $fields = null)
    {
        return $this->businessMatchGetAsyncWithHttpInfo($name, $address, $street, $city, $postal_code, $country, $region, $networks, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation businessMatchGetAsyncWithHttpInfo
     *
     * Match the business across multiple networks
     *
     * @param  string $name Name of the business, preferably as it appears on the review platform (required)
     * @param  string $address One-line formatted address of the business. For some networks, the more precise is the address, the more accurate are the results. Nevertheless, in most of the cases the city is sufficient. Can be omitted if the user prefers to specify address components: &#x60;street&#x60;, &#x60;city&#x60;, &#x60;region&#x60;, &#x60;postalCode&#x60;, and &#x60;country&#x60;. (required)
     * @param  string $street The street and street number of the business. Optionally, the unit/suite number can be appended. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $city The city where the business is located. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $postal_code Postal code or zipcode of the business. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $country The country where the business operates. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $region The state, province, or any regional/political area that the city of the business belongs to. (optional)
     * @param  \Zembra\Client\Model\ReviewNetwork[] $networks Optional field to restrict the search query to a limited set of networks. If omitted, the search covers all networks enabled for the account. (optional)
     * @param  \Zembra\Client\Model\ReviewPageField[] $fields List of fields to be returned per business page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function businessMatchGetAsyncWithHttpInfo($name, $address, $street, $city, $postal_code, $country, $region = null, $networks = null, $fields = null)
    {
        $returnType = '\Zembra\Client\Model\InlineResponse2004';
        $request = $this->businessMatchGetRequest($name, $address, $street, $city, $postal_code, $country, $region, $networks, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'businessMatchGet'
     *
     * @param  string $name Name of the business, preferably as it appears on the review platform (required)
     * @param  string $address One-line formatted address of the business. For some networks, the more precise is the address, the more accurate are the results. Nevertheless, in most of the cases the city is sufficient. Can be omitted if the user prefers to specify address components: &#x60;street&#x60;, &#x60;city&#x60;, &#x60;region&#x60;, &#x60;postalCode&#x60;, and &#x60;country&#x60;. (required)
     * @param  string $street The street and street number of the business. Optionally, the unit/suite number can be appended. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $city The city where the business is located. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $postal_code Postal code or zipcode of the business. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $country The country where the business operates. Required if parameter &#x60;address&#x60; is missing. (required)
     * @param  string $region The state, province, or any regional/political area that the city of the business belongs to. (optional)
     * @param  \Zembra\Client\Model\ReviewNetwork[] $networks Optional field to restrict the search query to a limited set of networks. If omitted, the search covers all networks enabled for the account. (optional)
     * @param  \Zembra\Client\Model\ReviewPageField[] $fields List of fields to be returned per business page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function businessMatchGetRequest($name, $address, $street, $city, $postal_code, $country, $region = null, $networks = null, $fields = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling businessMatchGet'
            );
        }
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling businessMatchGet'
            );
        }
        // verify the required parameter 'street' is set
        if ($street === null || (is_array($street) && count($street) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $street when calling businessMatchGet'
            );
        }
        // verify the required parameter 'city' is set
        if ($city === null || (is_array($city) && count($city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $city when calling businessMatchGet'
            );
        }
        // verify the required parameter 'postal_code' is set
        if ($postal_code === null || (is_array($postal_code) && count($postal_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postal_code when calling businessMatchGet'
            );
        }
        // verify the required parameter 'country' is set
        if ($country === null || (is_array($country) && count($country) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country when calling businessMatchGet'
            );
        }

        $resourcePath = '/business/match';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // query params
        if ($address !== null) {
            $queryParams['address'] = ObjectSerializer::toQueryValue($address, null);
        }
        // query params
        if ($street !== null) {
            $queryParams['street'] = ObjectSerializer::toQueryValue($street, null);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city, null);
        }
        // query params
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region, null);
        }
        // query params
        if ($postal_code !== null) {
            $queryParams['postalCode'] = ObjectSerializer::toQueryValue($postal_code, null);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country, null);
        }
        // query params
        if (is_array($networks)) {
            $networks = ObjectSerializer::serializeCollection($networks, 'multi', true);
        }
        if ($networks !== null) {
            $queryParams['networks[]'] = ObjectSerializer::toQueryValue($networks, null);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields[]'] = ObjectSerializer::toQueryValue($fields, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation businessNetworkGet
     *
     * Get business details
     *
     * @param  \Zembra\Client\Model\ReviewNetwork $network Network the business page belongs to (required)
     * @param  \Zembra\Client\Model\Slug $slug The business identifier as shown on the URL of the native site. It can be the full URL or a part of it. The slug pattern varies per network. Here is a list of acceptable slugs per network:     - **Angi**:     - ca/poway/crawl-space-and-attic-pro-reviews-9469089     - https://www.angi.com/companylist/us/ca/poway/crawl-space-and-attic-pro-reviews-9469089.htm   - **Apartment Guide**:     - 155467     - The-Village-Mission-Valley/155467     - apartments/California/San-Diego/The-Village-Mission-Valley/155467     - https://www.apartmentguide.com/apartments/California/San-Diego/The-Village-Mission-Valley/155467/   - **ApartmentRatings**:     - courts-at-preston-oaks_972788142275240     - https://www.apartmentratings.com/tx/dallas/courts-at-preston-oaks_972788142275240     - 972788142275240   - **Apartments**:     - 5jm0mwp     - overture-san-marcos-55-senior-housing-apa-san-marcos-ca/5jm0mwp     - https://www.apartments.com/overture-san-marcos-55-senior-housing-apa-san-marcos-ca/5jm0mwp   - **Better Business Bureau**:     - morgan-properties-0241-80016288     - https://www.bbb.org/us/pa/king-of-prussia/profile/property-management/morgan-properties-0241-80016288     - 0241-80016288   - **Booking**:     - hotel/us/polo-towers-suites     - attractions/us/prywkuaglxhb-las-vegas-strip-helicopter-ride-at-night     - https://www.booking.com/hotel/it/polo-towers-suites.it.html     - https://www.booking.com/attractions/us/prywkuaglxhb-las-vegas-strip-helicopter-ride-at-night.html   - **Carfax**:     - Reviews-Cronin-Chrysler-Dodge-Jeep-Ram-Lebanon-OH_P9E4IWXPNS     - P9E4IWXPNS     - https://www.carfax.com/Reviews-Cronin-Chrysler-Dodge-Jeep-Ram-Lebanon-OH_P9E4IWXPNS   - **Citysearch**:     - 44160554     - http://www.citysearch.com/profile/44160554/san_antonio_tx/fralo_s_art_of_pizza.html   - **Expedia**:     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - https://www.expedia.com/Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039     - h14833039     - 14833039   - **Facebook**:     - premiatofornocantoni     - 830214057037039     - https://www.facebook.com/premiatofornocantoni     - https://www.facebook.com/830214057037039     - https://www.facebook.com/pg/premiatofornocantoni   - **Foursquare**:     - 4a947bf6f964a520bf2120e3     - https://www.foursquare.com/v/bird-rock-coffee-roasters/4a947bf6f964a520bf2120e3     - https://www.foursquare.com/4a947bf6f964a520bf2120e3   - **Glassdoor**:     - Tower-Health-Reviews-E1833870     - https://www.glassdoor.com/Reviews/Tower-Health-Reviews-E1833870.htm     - https://www.glassdoor.com/Overview/Working-at-Tower-Health-EI_IE1833870.11,23.htm     - EI_IE1833870     - 1833870   - **Google**:     - 472717649119152494     - https://www.google.com/maps?cid&#x3D;472717649119152494     - https://maps.google.com/maps?cid&#x3D;472717649119152494     - ChIJx0JMBTFV2YARbgnOgjJujwY     - https://www.google.com/maps/place/The+Cheesecake+Factory/@32.76918,-117.1677887,17z/data&#x3D;!3m1!4b1!4m5!3m4!1s0x0:0x68f6e3282ce096e!8m2!3d32.76918!4d-117.1656   - **Grubhub**:     - 268858     - https://www.grubhub.com/restaurant/22-thai-cuisine-59-nassau-st-new-york/268858     - https://www.grubhub.com/restaurant/22-thai-cuisine-59-nassau-st-new-york/268858/reviews   - **Indeed**:     - Steadfast-Companies     - https://www.indeed.com/cmp/Steadfast-Companies     - https://www.indeed.com/cmp/Steadfast-Companies/reviews   - **Opentable**:     - r/the-rooftop-by-stk-san-diego     - https://www.opentable.com/r/the-rooftop-by-stk-san-diego     - https://www.opentable.com/bencotto-italian-kitchen     - bencotto-italian-kitchen     - https://www.opentable.com/restaurant/profile/1234567891234     - 1234567891234   - **Orbitz**:     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - https://www.orbitz.com/Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039     - h14833039     - 14833039   - **PagesJaunes**:     - 57672837     - https://www.pagesjaunes.fr/pros/57672837     - https://www.pagesjaunes.fr/pros/detail?bloc_id&#x3D;51362276000001C0001&amp;no_sequence&#x3D;1&amp;code_rubrique&#x3D;30101400     - https://www.pagesjaunes.fr/pros/detail?bloc_id&#x3D;FCP57672837CLIENTDCESS000003C0001%26no_sequence&#x3D;1%26code_rubrique&#x3D;54053000   - **Travelocity**:     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - https://www.travelocity.com/Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039     - h14833039     - 14833039   - **Treatwell**:     - https://www.treatwell.fr/salon/creepy-barber-the-home-show-studio-prive     - treatwell.fr/salon/creepy-barber-the-home-show-studio-prive     - https://www.treatwell.co.uk/salon/creepy-barber-the-home-show-studio-prive   - **Tripadvisor**:     - g53957-d4838236     - https://www.tripadvisor.com/Restaurant_Review-g53957-d4838236-Reviews-Top_of_the_80_s-West_Hazleton_Luzerne_County_Pocono_Mountains_Region_Pennsylvania.html     - Restaurant_Review-g53957-d4838236-Reviews-Top_of_the_80_s-West_Hazleton_Luzerne_County_Pocono_Mountains_Region_Pennsylvania.html     - d4838236     - 4838236   - **Trustpilot**:     - trustpilot.com     - https://www.trustpilot.fr/review/trustpilot.com     - https://fr.trustpilot.com/review/trustpilot.com     - trustpilot.com/review/www.trustpilot.com   - **Yellowpages**:     - the-auto-doc-8519899     - https://www.yellowpages.com/houston-tx/mip/the-auto-doc-8519899     - houston-tx/mip/the-auto-doc-8519899   - **Yelp**:     - the-cheesecake-factory-san-diego     - https://www.yelp.com/biz/the-cheesecake-factory-san-diego   - **Zomato**:     - san-diego/buon-appetito-little-italy     - https://www.zomato.com/san-diego/buon-appetito-little-italy/reviews     - https://www.zomato.com/tr/san-diego/buon-appetito-little-italy/reviews (required)
     * @param  \Zembra\Client\Model\ReviewPageField[] $fields Sub-list of fields to be returned. If omitted, all the fields are returned. (optional)
     *
     * @throws \Zembra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Zembra\Client\Model\InlineResponse2005
     */
    public function businessNetworkGet($network, $slug, $fields = null)
    {
        list($response) = $this->businessNetworkGetWithHttpInfo($network, $slug, $fields);
        return $response;
    }

    /**
     * Operation businessNetworkGetWithHttpInfo
     *
     * Get business details
     *
     * @param  \Zembra\Client\Model\ReviewNetwork $network Network the business page belongs to (required)
     * @param  \Zembra\Client\Model\Slug $slug The business identifier as shown on the URL of the native site. It can be the full URL or a part of it. The slug pattern varies per network. Here is a list of acceptable slugs per network:     - **Angi**:     - ca/poway/crawl-space-and-attic-pro-reviews-9469089     - https://www.angi.com/companylist/us/ca/poway/crawl-space-and-attic-pro-reviews-9469089.htm   - **Apartment Guide**:     - 155467     - The-Village-Mission-Valley/155467     - apartments/California/San-Diego/The-Village-Mission-Valley/155467     - https://www.apartmentguide.com/apartments/California/San-Diego/The-Village-Mission-Valley/155467/   - **ApartmentRatings**:     - courts-at-preston-oaks_972788142275240     - https://www.apartmentratings.com/tx/dallas/courts-at-preston-oaks_972788142275240     - 972788142275240   - **Apartments**:     - 5jm0mwp     - overture-san-marcos-55-senior-housing-apa-san-marcos-ca/5jm0mwp     - https://www.apartments.com/overture-san-marcos-55-senior-housing-apa-san-marcos-ca/5jm0mwp   - **Better Business Bureau**:     - morgan-properties-0241-80016288     - https://www.bbb.org/us/pa/king-of-prussia/profile/property-management/morgan-properties-0241-80016288     - 0241-80016288   - **Booking**:     - hotel/us/polo-towers-suites     - attractions/us/prywkuaglxhb-las-vegas-strip-helicopter-ride-at-night     - https://www.booking.com/hotel/it/polo-towers-suites.it.html     - https://www.booking.com/attractions/us/prywkuaglxhb-las-vegas-strip-helicopter-ride-at-night.html   - **Carfax**:     - Reviews-Cronin-Chrysler-Dodge-Jeep-Ram-Lebanon-OH_P9E4IWXPNS     - P9E4IWXPNS     - https://www.carfax.com/Reviews-Cronin-Chrysler-Dodge-Jeep-Ram-Lebanon-OH_P9E4IWXPNS   - **Citysearch**:     - 44160554     - http://www.citysearch.com/profile/44160554/san_antonio_tx/fralo_s_art_of_pizza.html   - **Expedia**:     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - https://www.expedia.com/Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039     - h14833039     - 14833039   - **Facebook**:     - premiatofornocantoni     - 830214057037039     - https://www.facebook.com/premiatofornocantoni     - https://www.facebook.com/830214057037039     - https://www.facebook.com/pg/premiatofornocantoni   - **Foursquare**:     - 4a947bf6f964a520bf2120e3     - https://www.foursquare.com/v/bird-rock-coffee-roasters/4a947bf6f964a520bf2120e3     - https://www.foursquare.com/4a947bf6f964a520bf2120e3   - **Glassdoor**:     - Tower-Health-Reviews-E1833870     - https://www.glassdoor.com/Reviews/Tower-Health-Reviews-E1833870.htm     - https://www.glassdoor.com/Overview/Working-at-Tower-Health-EI_IE1833870.11,23.htm     - EI_IE1833870     - 1833870   - **Google**:     - 472717649119152494     - https://www.google.com/maps?cid&#x3D;472717649119152494     - https://maps.google.com/maps?cid&#x3D;472717649119152494     - ChIJx0JMBTFV2YARbgnOgjJujwY     - https://www.google.com/maps/place/The+Cheesecake+Factory/@32.76918,-117.1677887,17z/data&#x3D;!3m1!4b1!4m5!3m4!1s0x0:0x68f6e3282ce096e!8m2!3d32.76918!4d-117.1656   - **Grubhub**:     - 268858     - https://www.grubhub.com/restaurant/22-thai-cuisine-59-nassau-st-new-york/268858     - https://www.grubhub.com/restaurant/22-thai-cuisine-59-nassau-st-new-york/268858/reviews   - **Indeed**:     - Steadfast-Companies     - https://www.indeed.com/cmp/Steadfast-Companies     - https://www.indeed.com/cmp/Steadfast-Companies/reviews   - **Opentable**:     - r/the-rooftop-by-stk-san-diego     - https://www.opentable.com/r/the-rooftop-by-stk-san-diego     - https://www.opentable.com/bencotto-italian-kitchen     - bencotto-italian-kitchen     - https://www.opentable.com/restaurant/profile/1234567891234     - 1234567891234   - **Orbitz**:     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - https://www.orbitz.com/Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039     - h14833039     - 14833039   - **PagesJaunes**:     - 57672837     - https://www.pagesjaunes.fr/pros/57672837     - https://www.pagesjaunes.fr/pros/detail?bloc_id&#x3D;51362276000001C0001&amp;no_sequence&#x3D;1&amp;code_rubrique&#x3D;30101400     - https://www.pagesjaunes.fr/pros/detail?bloc_id&#x3D;FCP57672837CLIENTDCESS000003C0001%26no_sequence&#x3D;1%26code_rubrique&#x3D;54053000   - **Travelocity**:     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - https://www.travelocity.com/Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039     - h14833039     - 14833039   - **Treatwell**:     - https://www.treatwell.fr/salon/creepy-barber-the-home-show-studio-prive     - treatwell.fr/salon/creepy-barber-the-home-show-studio-prive     - https://www.treatwell.co.uk/salon/creepy-barber-the-home-show-studio-prive   - **Tripadvisor**:     - g53957-d4838236     - https://www.tripadvisor.com/Restaurant_Review-g53957-d4838236-Reviews-Top_of_the_80_s-West_Hazleton_Luzerne_County_Pocono_Mountains_Region_Pennsylvania.html     - Restaurant_Review-g53957-d4838236-Reviews-Top_of_the_80_s-West_Hazleton_Luzerne_County_Pocono_Mountains_Region_Pennsylvania.html     - d4838236     - 4838236   - **Trustpilot**:     - trustpilot.com     - https://www.trustpilot.fr/review/trustpilot.com     - https://fr.trustpilot.com/review/trustpilot.com     - trustpilot.com/review/www.trustpilot.com   - **Yellowpages**:     - the-auto-doc-8519899     - https://www.yellowpages.com/houston-tx/mip/the-auto-doc-8519899     - houston-tx/mip/the-auto-doc-8519899   - **Yelp**:     - the-cheesecake-factory-san-diego     - https://www.yelp.com/biz/the-cheesecake-factory-san-diego   - **Zomato**:     - san-diego/buon-appetito-little-italy     - https://www.zomato.com/san-diego/buon-appetito-little-italy/reviews     - https://www.zomato.com/tr/san-diego/buon-appetito-little-italy/reviews (required)
     * @param  \Zembra\Client\Model\ReviewPageField[] $fields Sub-list of fields to be returned. If omitted, all the fields are returned. (optional)
     *
     * @throws \Zembra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Zembra\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function businessNetworkGetWithHttpInfo($network, $slug, $fields = null)
    {
        $returnType = '\Zembra\Client\Model\InlineResponse2005';
        $request = $this->businessNetworkGetRequest($network, $slug, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse4003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse402',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse4031',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zembra\Client\Model\InlineResponse4042',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation businessNetworkGetAsync
     *
     * Get business details
     *
     * @param  \Zembra\Client\Model\ReviewNetwork $network Network the business page belongs to (required)
     * @param  \Zembra\Client\Model\Slug $slug The business identifier as shown on the URL of the native site. It can be the full URL or a part of it. The slug pattern varies per network. Here is a list of acceptable slugs per network:     - **Angi**:     - ca/poway/crawl-space-and-attic-pro-reviews-9469089     - https://www.angi.com/companylist/us/ca/poway/crawl-space-and-attic-pro-reviews-9469089.htm   - **Apartment Guide**:     - 155467     - The-Village-Mission-Valley/155467     - apartments/California/San-Diego/The-Village-Mission-Valley/155467     - https://www.apartmentguide.com/apartments/California/San-Diego/The-Village-Mission-Valley/155467/   - **ApartmentRatings**:     - courts-at-preston-oaks_972788142275240     - https://www.apartmentratings.com/tx/dallas/courts-at-preston-oaks_972788142275240     - 972788142275240   - **Apartments**:     - 5jm0mwp     - overture-san-marcos-55-senior-housing-apa-san-marcos-ca/5jm0mwp     - https://www.apartments.com/overture-san-marcos-55-senior-housing-apa-san-marcos-ca/5jm0mwp   - **Better Business Bureau**:     - morgan-properties-0241-80016288     - https://www.bbb.org/us/pa/king-of-prussia/profile/property-management/morgan-properties-0241-80016288     - 0241-80016288   - **Booking**:     - hotel/us/polo-towers-suites     - attractions/us/prywkuaglxhb-las-vegas-strip-helicopter-ride-at-night     - https://www.booking.com/hotel/it/polo-towers-suites.it.html     - https://www.booking.com/attractions/us/prywkuaglxhb-las-vegas-strip-helicopter-ride-at-night.html   - **Carfax**:     - Reviews-Cronin-Chrysler-Dodge-Jeep-Ram-Lebanon-OH_P9E4IWXPNS     - P9E4IWXPNS     - https://www.carfax.com/Reviews-Cronin-Chrysler-Dodge-Jeep-Ram-Lebanon-OH_P9E4IWXPNS   - **Citysearch**:     - 44160554     - http://www.citysearch.com/profile/44160554/san_antonio_tx/fralo_s_art_of_pizza.html   - **Expedia**:     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - https://www.expedia.com/Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039     - h14833039     - 14833039   - **Facebook**:     - premiatofornocantoni     - 830214057037039     - https://www.facebook.com/premiatofornocantoni     - https://www.facebook.com/830214057037039     - https://www.facebook.com/pg/premiatofornocantoni   - **Foursquare**:     - 4a947bf6f964a520bf2120e3     - https://www.foursquare.com/v/bird-rock-coffee-roasters/4a947bf6f964a520bf2120e3     - https://www.foursquare.com/4a947bf6f964a520bf2120e3   - **Glassdoor**:     - Tower-Health-Reviews-E1833870     - https://www.glassdoor.com/Reviews/Tower-Health-Reviews-E1833870.htm     - https://www.glassdoor.com/Overview/Working-at-Tower-Health-EI_IE1833870.11,23.htm     - EI_IE1833870     - 1833870   - **Google**:     - 472717649119152494     - https://www.google.com/maps?cid&#x3D;472717649119152494     - https://maps.google.com/maps?cid&#x3D;472717649119152494     - ChIJx0JMBTFV2YARbgnOgjJujwY     - https://www.google.com/maps/place/The+Cheesecake+Factory/@32.76918,-117.1677887,17z/data&#x3D;!3m1!4b1!4m5!3m4!1s0x0:0x68f6e3282ce096e!8m2!3d32.76918!4d-117.1656   - **Grubhub**:     - 268858     - https://www.grubhub.com/restaurant/22-thai-cuisine-59-nassau-st-new-york/268858     - https://www.grubhub.com/restaurant/22-thai-cuisine-59-nassau-st-new-york/268858/reviews   - **Indeed**:     - Steadfast-Companies     - https://www.indeed.com/cmp/Steadfast-Companies     - https://www.indeed.com/cmp/Steadfast-Companies/reviews   - **Opentable**:     - r/the-rooftop-by-stk-san-diego     - https://www.opentable.com/r/the-rooftop-by-stk-san-diego     - https://www.opentable.com/bencotto-italian-kitchen     - bencotto-italian-kitchen     - https://www.opentable.com/restaurant/profile/1234567891234     - 1234567891234   - **Orbitz**:     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - https://www.orbitz.com/Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039     - h14833039     - 14833039   - **PagesJaunes**:     - 57672837     - https://www.pagesjaunes.fr/pros/57672837     - https://www.pagesjaunes.fr/pros/detail?bloc_id&#x3D;51362276000001C0001&amp;no_sequence&#x3D;1&amp;code_rubrique&#x3D;30101400     - https://www.pagesjaunes.fr/pros/detail?bloc_id&#x3D;FCP57672837CLIENTDCESS000003C0001%26no_sequence&#x3D;1%26code_rubrique&#x3D;54053000   - **Travelocity**:     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - https://www.travelocity.com/Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039     - h14833039     - 14833039   - **Treatwell**:     - https://www.treatwell.fr/salon/creepy-barber-the-home-show-studio-prive     - treatwell.fr/salon/creepy-barber-the-home-show-studio-prive     - https://www.treatwell.co.uk/salon/creepy-barber-the-home-show-studio-prive   - **Tripadvisor**:     - g53957-d4838236     - https://www.tripadvisor.com/Restaurant_Review-g53957-d4838236-Reviews-Top_of_the_80_s-West_Hazleton_Luzerne_County_Pocono_Mountains_Region_Pennsylvania.html     - Restaurant_Review-g53957-d4838236-Reviews-Top_of_the_80_s-West_Hazleton_Luzerne_County_Pocono_Mountains_Region_Pennsylvania.html     - d4838236     - 4838236   - **Trustpilot**:     - trustpilot.com     - https://www.trustpilot.fr/review/trustpilot.com     - https://fr.trustpilot.com/review/trustpilot.com     - trustpilot.com/review/www.trustpilot.com   - **Yellowpages**:     - the-auto-doc-8519899     - https://www.yellowpages.com/houston-tx/mip/the-auto-doc-8519899     - houston-tx/mip/the-auto-doc-8519899   - **Yelp**:     - the-cheesecake-factory-san-diego     - https://www.yelp.com/biz/the-cheesecake-factory-san-diego   - **Zomato**:     - san-diego/buon-appetito-little-italy     - https://www.zomato.com/san-diego/buon-appetito-little-italy/reviews     - https://www.zomato.com/tr/san-diego/buon-appetito-little-italy/reviews (required)
     * @param  \Zembra\Client\Model\ReviewPageField[] $fields Sub-list of fields to be returned. If omitted, all the fields are returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function businessNetworkGetAsync($network, $slug, $fields = null)
    {
        return $this->businessNetworkGetAsyncWithHttpInfo($network, $slug, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation businessNetworkGetAsyncWithHttpInfo
     *
     * Get business details
     *
     * @param  \Zembra\Client\Model\ReviewNetwork $network Network the business page belongs to (required)
     * @param  \Zembra\Client\Model\Slug $slug The business identifier as shown on the URL of the native site. It can be the full URL or a part of it. The slug pattern varies per network. Here is a list of acceptable slugs per network:     - **Angi**:     - ca/poway/crawl-space-and-attic-pro-reviews-9469089     - https://www.angi.com/companylist/us/ca/poway/crawl-space-and-attic-pro-reviews-9469089.htm   - **Apartment Guide**:     - 155467     - The-Village-Mission-Valley/155467     - apartments/California/San-Diego/The-Village-Mission-Valley/155467     - https://www.apartmentguide.com/apartments/California/San-Diego/The-Village-Mission-Valley/155467/   - **ApartmentRatings**:     - courts-at-preston-oaks_972788142275240     - https://www.apartmentratings.com/tx/dallas/courts-at-preston-oaks_972788142275240     - 972788142275240   - **Apartments**:     - 5jm0mwp     - overture-san-marcos-55-senior-housing-apa-san-marcos-ca/5jm0mwp     - https://www.apartments.com/overture-san-marcos-55-senior-housing-apa-san-marcos-ca/5jm0mwp   - **Better Business Bureau**:     - morgan-properties-0241-80016288     - https://www.bbb.org/us/pa/king-of-prussia/profile/property-management/morgan-properties-0241-80016288     - 0241-80016288   - **Booking**:     - hotel/us/polo-towers-suites     - attractions/us/prywkuaglxhb-las-vegas-strip-helicopter-ride-at-night     - https://www.booking.com/hotel/it/polo-towers-suites.it.html     - https://www.booking.com/attractions/us/prywkuaglxhb-las-vegas-strip-helicopter-ride-at-night.html   - **Carfax**:     - Reviews-Cronin-Chrysler-Dodge-Jeep-Ram-Lebanon-OH_P9E4IWXPNS     - P9E4IWXPNS     - https://www.carfax.com/Reviews-Cronin-Chrysler-Dodge-Jeep-Ram-Lebanon-OH_P9E4IWXPNS   - **Citysearch**:     - 44160554     - http://www.citysearch.com/profile/44160554/san_antonio_tx/fralo_s_art_of_pizza.html   - **Expedia**:     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - https://www.expedia.com/Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039     - h14833039     - 14833039   - **Facebook**:     - premiatofornocantoni     - 830214057037039     - https://www.facebook.com/premiatofornocantoni     - https://www.facebook.com/830214057037039     - https://www.facebook.com/pg/premiatofornocantoni   - **Foursquare**:     - 4a947bf6f964a520bf2120e3     - https://www.foursquare.com/v/bird-rock-coffee-roasters/4a947bf6f964a520bf2120e3     - https://www.foursquare.com/4a947bf6f964a520bf2120e3   - **Glassdoor**:     - Tower-Health-Reviews-E1833870     - https://www.glassdoor.com/Reviews/Tower-Health-Reviews-E1833870.htm     - https://www.glassdoor.com/Overview/Working-at-Tower-Health-EI_IE1833870.11,23.htm     - EI_IE1833870     - 1833870   - **Google**:     - 472717649119152494     - https://www.google.com/maps?cid&#x3D;472717649119152494     - https://maps.google.com/maps?cid&#x3D;472717649119152494     - ChIJx0JMBTFV2YARbgnOgjJujwY     - https://www.google.com/maps/place/The+Cheesecake+Factory/@32.76918,-117.1677887,17z/data&#x3D;!3m1!4b1!4m5!3m4!1s0x0:0x68f6e3282ce096e!8m2!3d32.76918!4d-117.1656   - **Grubhub**:     - 268858     - https://www.grubhub.com/restaurant/22-thai-cuisine-59-nassau-st-new-york/268858     - https://www.grubhub.com/restaurant/22-thai-cuisine-59-nassau-st-new-york/268858/reviews   - **Indeed**:     - Steadfast-Companies     - https://www.indeed.com/cmp/Steadfast-Companies     - https://www.indeed.com/cmp/Steadfast-Companies/reviews   - **Opentable**:     - r/the-rooftop-by-stk-san-diego     - https://www.opentable.com/r/the-rooftop-by-stk-san-diego     - https://www.opentable.com/bencotto-italian-kitchen     - bencotto-italian-kitchen     - https://www.opentable.com/restaurant/profile/1234567891234     - 1234567891234   - **Orbitz**:     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - https://www.orbitz.com/Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039     - h14833039     - 14833039   - **PagesJaunes**:     - 57672837     - https://www.pagesjaunes.fr/pros/57672837     - https://www.pagesjaunes.fr/pros/detail?bloc_id&#x3D;51362276000001C0001&amp;no_sequence&#x3D;1&amp;code_rubrique&#x3D;30101400     - https://www.pagesjaunes.fr/pros/detail?bloc_id&#x3D;FCP57672837CLIENTDCESS000003C0001%26no_sequence&#x3D;1%26code_rubrique&#x3D;54053000   - **Travelocity**:     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - https://www.travelocity.com/Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039     - h14833039     - 14833039   - **Treatwell**:     - https://www.treatwell.fr/salon/creepy-barber-the-home-show-studio-prive     - treatwell.fr/salon/creepy-barber-the-home-show-studio-prive     - https://www.treatwell.co.uk/salon/creepy-barber-the-home-show-studio-prive   - **Tripadvisor**:     - g53957-d4838236     - https://www.tripadvisor.com/Restaurant_Review-g53957-d4838236-Reviews-Top_of_the_80_s-West_Hazleton_Luzerne_County_Pocono_Mountains_Region_Pennsylvania.html     - Restaurant_Review-g53957-d4838236-Reviews-Top_of_the_80_s-West_Hazleton_Luzerne_County_Pocono_Mountains_Region_Pennsylvania.html     - d4838236     - 4838236   - **Trustpilot**:     - trustpilot.com     - https://www.trustpilot.fr/review/trustpilot.com     - https://fr.trustpilot.com/review/trustpilot.com     - trustpilot.com/review/www.trustpilot.com   - **Yellowpages**:     - the-auto-doc-8519899     - https://www.yellowpages.com/houston-tx/mip/the-auto-doc-8519899     - houston-tx/mip/the-auto-doc-8519899   - **Yelp**:     - the-cheesecake-factory-san-diego     - https://www.yelp.com/biz/the-cheesecake-factory-san-diego   - **Zomato**:     - san-diego/buon-appetito-little-italy     - https://www.zomato.com/san-diego/buon-appetito-little-italy/reviews     - https://www.zomato.com/tr/san-diego/buon-appetito-little-italy/reviews (required)
     * @param  \Zembra\Client\Model\ReviewPageField[] $fields Sub-list of fields to be returned. If omitted, all the fields are returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function businessNetworkGetAsyncWithHttpInfo($network, $slug, $fields = null)
    {
        $returnType = '\Zembra\Client\Model\InlineResponse2005';
        $request = $this->businessNetworkGetRequest($network, $slug, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'businessNetworkGet'
     *
     * @param  \Zembra\Client\Model\ReviewNetwork $network Network the business page belongs to (required)
     * @param  \Zembra\Client\Model\Slug $slug The business identifier as shown on the URL of the native site. It can be the full URL or a part of it. The slug pattern varies per network. Here is a list of acceptable slugs per network:     - **Angi**:     - ca/poway/crawl-space-and-attic-pro-reviews-9469089     - https://www.angi.com/companylist/us/ca/poway/crawl-space-and-attic-pro-reviews-9469089.htm   - **Apartment Guide**:     - 155467     - The-Village-Mission-Valley/155467     - apartments/California/San-Diego/The-Village-Mission-Valley/155467     - https://www.apartmentguide.com/apartments/California/San-Diego/The-Village-Mission-Valley/155467/   - **ApartmentRatings**:     - courts-at-preston-oaks_972788142275240     - https://www.apartmentratings.com/tx/dallas/courts-at-preston-oaks_972788142275240     - 972788142275240   - **Apartments**:     - 5jm0mwp     - overture-san-marcos-55-senior-housing-apa-san-marcos-ca/5jm0mwp     - https://www.apartments.com/overture-san-marcos-55-senior-housing-apa-san-marcos-ca/5jm0mwp   - **Better Business Bureau**:     - morgan-properties-0241-80016288     - https://www.bbb.org/us/pa/king-of-prussia/profile/property-management/morgan-properties-0241-80016288     - 0241-80016288   - **Booking**:     - hotel/us/polo-towers-suites     - attractions/us/prywkuaglxhb-las-vegas-strip-helicopter-ride-at-night     - https://www.booking.com/hotel/it/polo-towers-suites.it.html     - https://www.booking.com/attractions/us/prywkuaglxhb-las-vegas-strip-helicopter-ride-at-night.html   - **Carfax**:     - Reviews-Cronin-Chrysler-Dodge-Jeep-Ram-Lebanon-OH_P9E4IWXPNS     - P9E4IWXPNS     - https://www.carfax.com/Reviews-Cronin-Chrysler-Dodge-Jeep-Ram-Lebanon-OH_P9E4IWXPNS   - **Citysearch**:     - 44160554     - http://www.citysearch.com/profile/44160554/san_antonio_tx/fralo_s_art_of_pizza.html   - **Expedia**:     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - https://www.expedia.com/Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039     - h14833039     - 14833039   - **Facebook**:     - premiatofornocantoni     - 830214057037039     - https://www.facebook.com/premiatofornocantoni     - https://www.facebook.com/830214057037039     - https://www.facebook.com/pg/premiatofornocantoni   - **Foursquare**:     - 4a947bf6f964a520bf2120e3     - https://www.foursquare.com/v/bird-rock-coffee-roasters/4a947bf6f964a520bf2120e3     - https://www.foursquare.com/4a947bf6f964a520bf2120e3   - **Glassdoor**:     - Tower-Health-Reviews-E1833870     - https://www.glassdoor.com/Reviews/Tower-Health-Reviews-E1833870.htm     - https://www.glassdoor.com/Overview/Working-at-Tower-Health-EI_IE1833870.11,23.htm     - EI_IE1833870     - 1833870   - **Google**:     - 472717649119152494     - https://www.google.com/maps?cid&#x3D;472717649119152494     - https://maps.google.com/maps?cid&#x3D;472717649119152494     - ChIJx0JMBTFV2YARbgnOgjJujwY     - https://www.google.com/maps/place/The+Cheesecake+Factory/@32.76918,-117.1677887,17z/data&#x3D;!3m1!4b1!4m5!3m4!1s0x0:0x68f6e3282ce096e!8m2!3d32.76918!4d-117.1656   - **Grubhub**:     - 268858     - https://www.grubhub.com/restaurant/22-thai-cuisine-59-nassau-st-new-york/268858     - https://www.grubhub.com/restaurant/22-thai-cuisine-59-nassau-st-new-york/268858/reviews   - **Indeed**:     - Steadfast-Companies     - https://www.indeed.com/cmp/Steadfast-Companies     - https://www.indeed.com/cmp/Steadfast-Companies/reviews   - **Opentable**:     - r/the-rooftop-by-stk-san-diego     - https://www.opentable.com/r/the-rooftop-by-stk-san-diego     - https://www.opentable.com/bencotto-italian-kitchen     - bencotto-italian-kitchen     - https://www.opentable.com/restaurant/profile/1234567891234     - 1234567891234   - **Orbitz**:     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - https://www.orbitz.com/Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039     - h14833039     - 14833039   - **PagesJaunes**:     - 57672837     - https://www.pagesjaunes.fr/pros/57672837     - https://www.pagesjaunes.fr/pros/detail?bloc_id&#x3D;51362276000001C0001&amp;no_sequence&#x3D;1&amp;code_rubrique&#x3D;30101400     - https://www.pagesjaunes.fr/pros/detail?bloc_id&#x3D;FCP57672837CLIENTDCESS000003C0001%26no_sequence&#x3D;1%26code_rubrique&#x3D;54053000   - **Travelocity**:     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - https://www.travelocity.com/Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039.Hotel-Information     - Worcester-Hotels-Hilton-Garden-Inn-BostonMarlborough.h14833039     - h14833039     - 14833039   - **Treatwell**:     - https://www.treatwell.fr/salon/creepy-barber-the-home-show-studio-prive     - treatwell.fr/salon/creepy-barber-the-home-show-studio-prive     - https://www.treatwell.co.uk/salon/creepy-barber-the-home-show-studio-prive   - **Tripadvisor**:     - g53957-d4838236     - https://www.tripadvisor.com/Restaurant_Review-g53957-d4838236-Reviews-Top_of_the_80_s-West_Hazleton_Luzerne_County_Pocono_Mountains_Region_Pennsylvania.html     - Restaurant_Review-g53957-d4838236-Reviews-Top_of_the_80_s-West_Hazleton_Luzerne_County_Pocono_Mountains_Region_Pennsylvania.html     - d4838236     - 4838236   - **Trustpilot**:     - trustpilot.com     - https://www.trustpilot.fr/review/trustpilot.com     - https://fr.trustpilot.com/review/trustpilot.com     - trustpilot.com/review/www.trustpilot.com   - **Yellowpages**:     - the-auto-doc-8519899     - https://www.yellowpages.com/houston-tx/mip/the-auto-doc-8519899     - houston-tx/mip/the-auto-doc-8519899   - **Yelp**:     - the-cheesecake-factory-san-diego     - https://www.yelp.com/biz/the-cheesecake-factory-san-diego   - **Zomato**:     - san-diego/buon-appetito-little-italy     - https://www.zomato.com/san-diego/buon-appetito-little-italy/reviews     - https://www.zomato.com/tr/san-diego/buon-appetito-little-italy/reviews (required)
     * @param  \Zembra\Client\Model\ReviewPageField[] $fields Sub-list of fields to be returned. If omitted, all the fields are returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function businessNetworkGetRequest($network, $slug, $fields = null)
    {
        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling businessNetworkGet'
            );
        }
        // verify the required parameter 'slug' is set
        if ($slug === null || (is_array($slug) && count($slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slug when calling businessNetworkGet'
            );
        }

        $resourcePath = '/business/{network}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($slug !== null) {
            $queryParams['slug'] = ObjectSerializer::toQueryValue($slug, null);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields[]'] = ObjectSerializer::toQueryValue($fields, null);
        }

        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
